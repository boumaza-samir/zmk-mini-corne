/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sl { release-after-ms = <125>; };

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <13 16>;
            layers = <0>;
        };

        capsw {
            bindings = <&caps_word>;
            key-positions = <16 19>;
            layers = <0>;
        };

        i3w_layer {
            bindings = <&mo 4>;
            key-positions = <36 41>;
            layers = <0>;
        };

        qu {
            bindings = <&lingerq Q 0>;
            key-positions = <1 2>;
            layers = <0>;
        };

        zed {
            bindings = <&kp Z>;
            key-positions = <1 3>;
            layers = <0>;
        };

        col {
            bindings = <&kp COLON>;
            key-positions = <32 33>;
            layers = <0>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <32 31>;
            layers = <0>;
        };

        sch {
            bindings = <&sch>;
            key-positions = <13 14 15>;
            layers = <0>;
        };

        tch {
            bindings = <&tch>;
            key-positions = <14 16 15>;
            layers = <0>;
        };

        wh {
            bindings = <&wh>;
            key-positions = <2 3>;
            layers = <0>;
        };

        ch {
            bindings = <&ch>;
            key-positions = <15 14>;
            layers = <0>;
            timeout-ms = <10>;
        };

        th {
            bindings = <&th>;
            key-positions = <16 15>;
            layers = <0>;
        };

        gh {
            bindings = <&gh>;
            key-positions = <4 3>;
            layers = <0>;
        };

        ph {
            bindings = <&ph>;
            key-positions = <26 27>;
            layers = <0>;
        };

        if {
            bindings = <&if>;
            key-positions = <21 22>;
            layers = <0>;
        };

        els {
            bindings = <&els>;
            key-positions = <20 21>;
            layers = <0>;
        };

        thn {
            bindings = <&thn>;
            key-positions = <17 16>;
            layers = <0>;
        };

        fi {
            bindings = <&fi>;
            key-positions = <33 34>;
            layers = <0>;
        };

        gam_win {
            bindings = <&kp LGUI>;
            key-positions = <4 5>;
            layers = <5>;
        };

        sshh {
            bindings = <&sshh>;
            key-positions = <13 15>;
            layers = <0>;
        };

        swit {
            bindings = <&swit>;
            key-positions = <13 2>;
            layers = <0>;
        };

        gam_esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <5>;
        };

        au {
            bindings = <&au>;
            key-positions = <19 22>;
            layers = <0>;
            timeout-ms = <100>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
            tap-ms = <30>;
        };

        wh: wh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp H>;
            label = "WH";
            tap-ms = <30>;
        };

        th: th {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H>;
            label = "TH";
            tap-ms = <30>;
        };

        ch: ch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp H>;
            label = "CH";
            tap-ms = <30>;
        };

        ph: ph {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp H>;
            label = "PH";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        gh: gh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp H>;
            label = "GH";
            tap-ms = <30>;
        };

        sch: sch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp C &kp H>;
            label = "SCH";
            tap-ms = <30>;
        };

        tch: tch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp C &kp H>;
            label = "TCH";
            tap-ms = <30>;
        };

        if: if {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp F &kp SPACE>;
            label = "IF";
            tap-ms = <30>;
        };

        els: els {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp L &kp S &kp E &kp SPACE>;
            label = "ELS";
            tap-ms = <30>;
        };

        thn: thn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E &kp N &kp SPACE>;
            label = "THN";
            tap-ms = <30>;
        };

        fi: fi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp I>;
            label = "FI";
            tap-ms = <30>;
        };

        sshh: sshh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp H>;
            label = "SSHH";
            tap-ms = <30>;
        };

        swit: swit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp W &kp I &kp T &kp C &kp H &kp SPACE>;
            label = "SWIT";
            tap-ms = <30>;
        };

        au: au {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp U>;
            label = "AU";
            tap-ms = <30>;
        };
    };

    behaviors {
        lingerq: lingerq {
            compatible = "zmk,behavior-hold-tap";
            label = "LINGERQ";
            bindings = <&kp>, <&qu>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
        };

        roll_hold: roll_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "ROLL_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_reptap: ht_reptap {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_REPTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q               &kp W                  &kp E                  &kp R                    &kp T                       &kp Y    &kp U           &kp I           &kp O           &kp P                   &none
&none  &roll_hold LCTRL A  &roll_hold LEFT_ALT S  &roll_hold LEFT_GUI D  &roll_hold LEFT_SHIFT F  &kp G                       &kp H    &roll_hold J A  &roll_hold K E  &roll_hold L I  &roll_hold SEMICOLON H  &none
&none  &kp Z               &kp X                  &kp C                  &kp V                    &kp B                       &kp N    &kp M           &kp COMMA       &kp PERIOD      &kp SLASH               &none
                                                  &mo 1                  &kp R                    &ht_reptap DEL BACKSPACE    &kp RET  &kp SPACE       &mo 2
            >;
        };

        num {
            bindings = <
&none  &none           &kp HOME      &kp UP        &kp END       &kp LC(F5)    &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp PLUS   &none
&none  &kp LCTRL       &kp LEFT      &kp DOWN      &kp RIGHT     &none         &kp SLASH     &kp N4  &kp N5  &kp N6  &kp MINUS  &none
&none  &kp LEFT_SHIFT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR    &kp PERIOD    &kp N1  &kp N2  &kp N3  &kp EQUAL  &none
                                     &none         &none         &none         &none         &kp N0  &mo 3
            >;
        };

        sym {
            bindings = <
&none  &lingerq Q 0  &kp Z     &none     &none     &none      &kp DLLR   &kp GRAVE  &kp SEMI  &kp COLON    &kp BACKSLASH  &none
&none  &kp LBRC      &kp LPAR  &kp RPAR  &kp RBRC  &none      &kp CARET  &kp QMARK  &kp EXCL  &kp AMPS     &kp PIPE       &none
&none  &kp LBKT      &kp LT    &kp GT    &kp RBKT  &none      &kp UNDER  &kp TILDE  &kp AT    &kp PERCENT  &kp POUND      &none
                               &tog 5    &none     &kp DEL    &none      &none      &none
            >;
        };

        fnk {
            bindings = <
&none  &none      &none     &none     &none      &none    &none  &kp F1  &kp F2   &kp F3   &kp F4   &none
&none  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &none    &none  &kp F5  &kp F6   &kp F7   &kp F8   &none
&none  &none      &none     &none     &none      &none    &none  &kp F9  &kp F10  &kp F11  &kp F12  &none
                            &none     &none      &none    &none  &none   &none
            >;
        };

        i3w {
            bindings = <
&none  &kp LG(Q)  &none         &kp LG(UP)    &none          &none    &none  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &none      &none
&none  &kp LSHFT  &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(RIGHT)  &none    &none  &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &kp RSHFT  &none
&none  &kp LCTRL  &none         &kp LG(S)     &none          &none    &none  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp RCTRL  &none
                                &none         &none          &none    &none  &kp LG(N0)  &none
            >;
        };

        gam {
            bindings = <
&none  &kp TAB    &kp Q  &kp W  &kp E     &kp R        &kp STAR  &kp N7  &kp N8  &kp N9  &kp PLUS   &none
&none  &kp LSHFT  &kp A  &kp S  &kp D     &kp F        &kp FSLH  &kp N4  &kp N5  &kp N6  &kp MINUS  &none
&none  &kp LCTRL  &kp Z  &kp X  &kp C     &kp V        &kp BSPC  &kp N1  &kp N2  &kp N3  &kp DOT    &none
                         &kp I  &kp LALT  &kp SPACE    &kp RET   &kp N0  &tog 5
            >;
        };
    };
};
